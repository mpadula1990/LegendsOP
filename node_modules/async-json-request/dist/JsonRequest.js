"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _request = require("request");

var _request2 = _interopRequireDefault(_request);

var _deepmerge = require("deepmerge");

var _deepmerge2 = _interopRequireDefault(_deepmerge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var allowedMethods = ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'CONNECT', 'OPTIONS', 'TRACE', 'PATCH'];

var JsonRequest = function () {
    /**
     *
     * @param apiBasePath
     * @param defaultRequestOptions
     * @param fullResponse
     */
    function JsonRequest(apiBasePath) {
        var defaultRequestOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var fullResponse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        _classCallCheck(this, JsonRequest);

        this._apiBasePath = apiBasePath;
        this._defaultRequestOptions = defaultRequestOptions;
        this._fullRepsonse = fullResponse;

        return this._getProxy();
    }

    _createClass(JsonRequest, [{
        key: "_getProxy",
        value: function _getProxy() {
            var extraOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            return new Proxy(this, {
                get: function get(target, name, receiver) {
                    if (name === 'options') {
                        return target._getOptionsMethod();
                    }

                    if (allowedMethods.indexOf(name.toString().toUpperCase()) === -1) {
                        return undefined;
                    }

                    return target._getMethod(name, extraOptions);
                }
            });
        }
    }, {
        key: "_getOptionsMethod",
        value: function _getOptionsMethod() {
            var self = this;

            return function (extraOptions) {
                return self._getProxy(extraOptions);
            };
        }
    }, {
        key: "_getMethod",
        value: function _getMethod(method) {
            var extraOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var self = this;

            var reqOptions = (0, _deepmerge2.default)(this._defaultRequestOptions, extraOptions);

            return function () {
                return self._runRequest.apply(self, [method.toUpperCase(), reqOptions].concat(Array.prototype.slice.call(arguments)));
            };
        }

        /**
         *
         * @param method
         * @param path
         * @param body
         * @param parameters
         * @return {Promise}
         * @private
         */

    }, {
        key: "_runRequest",
        value: function _runRequest(method, reqOptions, path, parameters, body) {
            var _this = this;

            var url = this._apiBasePath + path;

            var options = _extends({}, reqOptions, {
                url: url,
                method: method
            });

            options.json = true;

            if (!('headers' in options)) {
                options.headers = {};
            }

            options.headers['content-type'] = 'application/json';

            if (body) options.body = body;
            if (parameters) options.qs = parameters;

            return new Promise(function (resolve, reject) {
                (0, _request2.default)(options, function (err, res, data) {
                    if (err) {
                        return reject(err);
                    }

                    resolve(_this._fullRepsonse ? res : data);
                });
            });
        }
    }]);

    return JsonRequest;
}();

exports.default = JsonRequest;